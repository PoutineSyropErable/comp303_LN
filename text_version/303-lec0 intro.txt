WELCOME TO

COMP 303!
Introduction
Instructor: Jonathan Campbell
Winter 2025

üëã
3

Plan for today

1. Introductions
2. Main course concepts
3. Course info + grading scheme

4

Who am I?

Jonathan Campbell

‚Ä¢ Course lecturer / PhD student
‚Ä¢ Research into AI/games
‚Ä¢ Email: jonathan.campbell@mcgill.ca

5

Who are you??

6

Who are you??

B. Sci..........93
B. Arts.........52
Other............5
______
150

7

Who are you??

U1..............12
U2..............84
U3+.............54
______
150

8

Who are you??
Past students...43
Summer '20......1
Winter '21......5
Fall '21........5
Winter '22......3
Fall '22.......27
Winter '24......2

9

What is this course about?

What is this course about?

‚Ä¢ How to make good software!

11

12

An ELO of 2727 places O3 in the top 200 competitive programmers in the world on CodeForces.
14

...I believe the computer scientists
of the future will be so far removed from
the classic de nitions of ‚Äúsoftware‚Äù that
they would be hard-pressed to reverse a
linked list or implement Quicksort.

...Programming will be obsolete...

I am talking about replacing the
entire concept of writing programs with
training models...

fi

15

https://dl.acm.org/doi/pdf/10.1145/3570220

16

...much of ‚Äúthe rest of the job‚Äù is
understanding the user‚Äôs needs,
designing, testing, debugging,
reviewing code, nding out what
the user really needs (that they
didn‚Äôt tell you the rst time),
re ning the design, building an
e ective user interface, auditing
for security and so on.

fi

fi

fi

ff

17

https://venturebeat.com/ai/dont-quit-your-day-job-generative-ai-and-the-end-of-programming/

Our analysis revealed a range of vulnerabilities present in code generated by LLMs...

Notably, popular LLM-powered solutions like Github Copilot and ChatGPT
exhibited a higher rate of vulnerabilities compared to code written by humans.

18

https://ieeexplore.ieee.org/abstract/document/10795572

Software design

19

Software design

the construction of abstractions of data and computation and
the organization of these abstractions into a working software
application

20

21

http://www.ioccc.org/2020/endoh1/index.html

Goal of software design

Writing code that is simple, easy to understand and modify.

22

What is software design?
‚Ä¢ Deciding how to structure your code:
‚Ä¢ What data structure to use?
‚Ä¢ What methods should be de ned in an interface?
‚Ä¢ Where should an error be handled?

‚Ä¢ A heuristic process.

fi

23

How to approach software design?

24

Design patterns

25

Design patterns

‚Ä¢ A reusable solution to common, recurring problems.
‚Ä¢ Makes a design more exible.
‚Ä¢ We will go over a subset of them.

fl

26

Design anti-patterns

‚Ä¢ Designs which lead to problems, e.g.:
‚Ä¢ Duplicated code
‚Ä¢ Long methods
‚Ä¢ "God" classes

27

Course info

Prerequisites

‚Ä¢ You must have already taken COMP 250 and 206.

29

Prerequisites
‚Ä¢ You should be able to:
‚Ä¢ understand and use basic data structures;
‚Ä¢ understand basic OOP concepts (objects, references, interfaces,
inheritance, etc.);

‚Ä¢ write Java and Python programs to solve small problems;
‚Ä¢ use a version control system (e.g., Git); and
‚Ä¢ use the debugger!!!
30

Prerequisites

‚Ä¢ A brief self-assessment, to check if you need to review any
concepts, can be found here:

‚Ä¢ https://github.com/prmr/COMP303/blob/master/Assessment.md

31

Lectures

TR 2:35 - 3:55 p.m.
Slides and (best e ort) recordings posted by end of week.

ff

32

Textbook

33

Textbook
‚Ä¢ Available for free for McGill students at:
‚Ä¢ https://link.springer.com/book/10.1007/978-3-030-97899-0

‚Ä¢ Companion website with exercises:
‚Ä¢ https://github.com/prmr/DesignBook
‚Ä¢ https://codesample.info/

34

Textbook
‚Ä¢ Other textbooks:
‚Ä¢ The Pragmatic Programmer by Andrew Hunt and David Thomas
‚Ä¢

https://mcgill.on.worldcat.org/search/detail/1112609085?queryString=The
Pragmatic Programmer by Andrew Hunt and David Thomas

‚Ä¢ E ective Java by Joshua Bloch
‚Ä¢

https://learning.oreilly.com/library/view/e ective-java-3rd/9780134686097/

ff

ff

35

Syllabus

36

Of ce hours
‚Ä¢ O ce hours will take place in-person and through Zoom
and will start next week.

‚Ä¢ First come rst serve, one-on-one.

‚Ä¢ More information will be shared with you next week
(schedule, rooms, Zoom links, etc.).

‚Ä¢ Times will be variable during the term

(more during weeks where work is due).

fi

fi

ffi

37

TAs
Avinash

Issa

Divya

Keyu

38

Mentors
Angela

Laura

Daniel

Lauren

39

Class discussion: Ed
‚Ä¢ We will be using Ed for class discussion.
‚Ä¢ You can access by clicking on "Discussions" on myCourses nav bar.
‚Ä¢ Make sure to set up your email/noti cation settings

so that you are up to date with what is posted on Ed.

‚Ä¢ Here is a quick start guide to understand the features of Ed:
https://edstem.org/quickstart/ed-discussion.pdf

fi

40

Class discussion: Ed
‚Ä¢ Please post all questions about the course on Ed.
‚Ä¢ Please check here for policy/etiquette:
‚Ä¢ https://www2.uwstout.edu/content/profdev/rubrics/discuss_etiquette.html
‚Ä¢

http://blogs.onlineeducation.touro.edu/15-rules-netiquette-online-discussion-boards/

‚Ä¢ Course syllabus
‚Ä¢ Do not post duplicate questions!

‚Ä¢ You are encouraged to answer other students‚Äô questions.
‚Ä¢ OK to provide one or two lines of code to illustrate a point.
‚Ä¢ NOT ok to provide solution code.
41

Communication policy
‚Ä¢ For personal or medical issues, you can email me at
jonathan.campbell@mcgill.ca.

‚Ä¢ Make sure to put 'COMP 303' in subject and use McGill email.
‚Ä¢ If urgent, please write Urgent in the subject.

‚Ä¢ For questions regarding a grade on an assessment,

please see our policy in the course syllabus (section 4.5).

‚Ä¢ For all other questions, please post on Ed, or see me or a
TA in o ce hours and we will be happy to help you.

ffi

42

Assessment scheme

Old scheme from past terms

4 lab tests
Midterm exam
Final exam

25%
25%
50%

Old scheme from past terms

4 lab tests
Midterm exam
Final exam

25%
25%
50%

Old scheme from past terms

Midterm exam
Final exam

25%
45%

Our grading scheme

Midterm exam
Final exam
Project

25%
45%
30%

Our grading scheme

Midterm exam
Final exam
Project

25% or 0%
45% or 70%
30%

Project (30%)

‚Ä¢ Two phases
‚Ä¢ Planning (10%) (January to mid February)
‚Ä¢ Implementing (20%) (mid February to April)

49

Project
‚Ä¢ Planning
‚Ä¢ Forming teams
‚Ä¢ Brainstorming ideas: 1%
‚Ä¢ Project proposal: 5%
‚Ä¢ Reviewing other proposals: 4%

50

Project

‚Ä¢ Implementing
‚Ä¢ Check-in meeting: 4%
‚Ä¢ Final demo + code submission: 16%

51

Project

‚Ä¢ If working in team of 3:
‚Ä¢ Weekly re ection survey: 0.25% for each, 8 total (2%)
‚Ä¢ The 2% is added on top of your nal project mark (capped at 30%).

fi

fl

52

53

Your to-do list

‚Ä¢ Read the course syllabus (on myCourses).
‚Ä¢ Read Chapter 1 of Intro to Software Design by Robillard.
‚Ä¢ Try the self-assessment.
‚Ä¢ Do exercise M-0.

54

üëã
55

