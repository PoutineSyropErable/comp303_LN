COMP 303
Lecture 21

Functional design
Winter 2025
slides by Jonathan Campbell
© Instructor-generated course materials (e.g., slides, notes, assignment or exam questions, etc.) are protected by law and may not
be copied or distributed in any form or in any medium without explicit permission of the instructor. Note that infringements of
copyright can be subject to follow up by the University under the Code of Student Conduct and Disciplinary Procedures.

Announcements

• Project
• Team survey

2

Recap

Visitor: main idea

• If you have some functionality that you want to add to

existing classes (maybe in di erent parts of the class
hierarchy) without modifying those classes directly.

• The classes only need to be able to accept a Visitor, which could be
any behaviour.

ff

4

CompositeCardSource

public class CompositeCardSource implements CardSource {
private final List<CardSource> aElements;

}

public void accept(CardSourceVisitor pVisitor) {
pVisitor.visitCompositeCardSource(this);
for (CardSource source : aElements) {
source.accept(pVisitor);
}
}

5

CompositeCardSource
• We could have instead placed this same code inside the
visitCompositeCardSource method, instead of accept:

public class PrintVisitor implements CardSourceVisitor {
public void visitCompositeCardSource(CompositeCardSource pCompCardSrc) {
for (CardSource source : pCompositeCardSource) {
source.accept(this);
}
}
...
}

• (Since this class can't access the private aElements eld
of the composite, we'd have to make the composite
iterable.)

fi

6

CompositeCardSource

public class CompositeCardSource implements CardSource,
Iterable<CardSource> {
private final List<CardSource> aElements;

}

public Iterator<CardSource> iterator() {
return aElements.iterator();
}
...

7

CompositeCardSource
• The advantage to placing the traversal code in the visit
method is that, depending on the behaviour, we can
change the order of traversal, if we wanted.

• The downside is that we have to make the composite

class iterable, possibly making its encapsulation weaker.

• Another downside is that the traversal code would be repeated in
every concrete visitor (DUPLICATED CODE).

8

Visitor with inheritance

public abstract class AbstractCardSourceVisitor implements CardSourceVisitor {
public void visitCompositeCardSource(CompositeCardSource pCompositeCardSrc) {
for (CardSource source : pCompositeCardSource) {
source.accept(this);
}
}
public void visitDeck(Deck pDeck) {}
public void visitCardSequence(CardSequence pCardSequence) {}
}

Avoids duplicated code problem.

9

Visitor with data ow
• All of our visit methods have been void so far.
• But we may want to return information from them. E.g., a
size visitor should return the size.

• But, all visit methods must return void, or else they wouldn't
implement the abstract visitor interface.

• Instead, we will store the computed data into the visitor object.

fl

10

Visitor with data ow
public class CountingVisitor extends AbstractCardSourceVisitor {
private int aCount = 0;
public void visitDeck(Deck pDeck) {
for (Card card : pDeck) {
aCount++;
}
}
public void visitCardSequence(CardSequence pCardSequence) {
aCount += pCardSequence.size();
}

11
fl

}

public int getCount() {
return aCount;
}

Visitor with data ow

// in client code
CountingVisitor visitor = new CountingVisitor();
root.accept(visitor);
int result = visitor.getCount();

fl

12

Functional design

Functional design
• Higher-order function: a function that takes another
function as an argument.

• To support higher-order functions, a programming
language must (typically) also support rst-class
functions.

• First-class functions means that the language lets functions be

treated like variables: letting them be assigned to variables, passed
as arguments and returned from other functions.

fi

14

Back to Comparator
• We saw a while ago that, to compare two cards, we could
implement the Comparator<T> interface:

List<Card> cards = ...;
Collections.sort(cards, new Comparator<Card>() {
public int compare(Card pCard1, Card pCard2) {
return pCard1.getRank().compareTo(pCard2.getRank());
}
});

• Here, we created an anonymous class to implement the
interface.

15

Back to Comparator
List<Card> cards = ...;
Collections.sort(cards, new Comparator<Card>() {
public int compare(Card pCard1, Card pCard2) {
return pCard1.getRank().compareTo(pCard2.getRank());
}
});

• One problem with this, from a design point of view, is that
we are passing an object (of an anonymous class) to
Collections.sort.

• But object implies a collection of data and methods to operate on
the data. Here there is only a method, no data.

16

Back to Comparator
• A nicer way to do it is as follows. First, we'll de ne a new
comparison method in Card:

public class Card {
public static int compareByRank(Card pCard1, Card pCard2) {
return pCard1.getRank().compareTo(pCard2.getRank());
}
}

• Then, when we call sort, we pass a method reference.
Collections.sort(cards, Card::compareByRank);

fi

17

Higher-order functions
• Collections.sort is an example of a higher-order function,
because it can take a function as argument.

• It then applies that function, in this case, to compare the cards and
sort the list.

• Higher-order functions can lead to a larger design space
to explore, and their use can help to realize and apply
design patterns.

18

Higher-order functions
• We've seen that, for a higher-order function, we can pass:
• an instance of an anonymous class that implements some interface
• or a method reference

• There is a third option called, an anonymous function

(called a lambda expression). To do so, we need to learn
about functional interfaces.

19

Functional interfaces

• A functional interface is any interface with a single

abstract method. (It could have default and/or static
methods too.)

public interface Filter {
boolean accept(Card pCard);
}

20

Functional interfaces

• Here's an anonymous class that implements Filter:
Filter blackCardFilter = new Filter() {
public boolean accept(Card pCard) {
return pCard.getSuit().getColor() == Suit.Color.BLACK;
}
};

21

Functional interfaces

• Comparator<T>, which de nes a single abstract method
compare, can similarly be considered a functional
interface.

fi

22

Functional interfaces
• Java already de nes some functional interfaces in
java.util.function.

• One of them is called Predicate<T>, which de nes an

abstract method test that takes an argument of type T
and returns a boolean; we can use this instead of de ning
our own Filter interface:

Predicate<Card> blackCardFilter = new Predicate<Card>() {
public boolean test(Card pCard) {
return pCard.getSuit().getColor() == Suit.Color.BLACK;
}
};

fi

fi

fi

23

Lambda expressions
• We've seen that we can make an anonymous class that

implements an interface, then use the new keyword to
make an instance and pass it to a higher-order function.

• But there's a much cleaner way to do it, by de ning a

lambda expression, which we can think of as an
anonymous function (since we de ne it without a name).

• A lambda expression will let us implement the one method of a
functional interface in a very simple and clean way.

fi

fi

24

Lambda expressions: syntax
functional interface type

name of the new instance
of our functional interface

Predicate<Card> blackCardFilter =
(Card card) -> card.getSuit().getColor() == Suit.Color.BLACK;

parameters for the abstract
function declared in interface
(must be of compatible types)

body
(must evaluate to same type as speci ed in interface)

The same e ect as de ning an anonymous class to
implement our functional interface, but much cleaner.
fi

fi

ff

25

Lambda expressions
• Three parts:
• list of parameters; if none, put empty parentheses ()
• the right arrow ->
• body,
• either a single expression, the result of which is automatically
returned, or

• a block of statements including an explicit return, inside {}
26

Lambda expressions

Predicate<Card> blackCards = (Card card) ->
{ return card.getSuit().getColor() == Suit.Color.BLACK; };

De ning a block makes the lambda expression more complicated,
so we like to use single expressions whenever possible.

fi

27

Lambda expressions

Predicate<Card> blackCardFilter =
(card) -> card.getSuit().getColor() == Suit.Color.BLACK;

Since the parameter type(s) are speci ed in the interface,
we can omit them when de ning the lambda expression.
fi

fi

28

Lambda expressions

Predicate<Card> blackCardFilter =
card -> card.getSuit().getColor() == Suit.Color.BLACK;

If there is just one parameter, we can even omit the parentheses.
29

Using lambda expressions

Predicate<Card> blackCardFilter =
card -> card.getSuit().getColor() == Suit.Color.BLACK;
Deck deck = ...
int total = 0;
for (Card card : deck) {
// calling our test method just defined above
if (blackCardFilter.test(card)) {
total ++;
}
}

30

Using lambda expressions
• Many Java libraries de ne methods that accept functional
interface types. For instance, ArrayList::removeIf
takes a Predicate<T> to remove all objects that match
some condition:

ArrayList<Card> cards = ...
cards.removeIf(card ->
card.getSuit().getColor() == Suit.Color.BLACK);

• (The lambda expression is matched to the functional
interface type of the removeIf method.)

fi

31

Method references
• If we already have a method de ned in a class, e.g.:
public final class Card {
public boolean hasBlackSuit() {
return aSuit.getColor() == Color.BLACK;
}
}

• We could write a lambda that simply calls this method.
cards.removeIf(card -> card.hasBlackSuit());

fi

32

Method references
• Or, we could pass a reference to the method directly, which
reads almost like a regular (spoken language) sentence!

cards.removeIf(Card::hasBlackSuit);

• It is interpreted by the compiler as a shortcut to the full
lambda expression:

cards.removeIf(card -> card.hasBlackSuit());

• (which is valid since removeIf takes a Predicate<T>, which
has a single test method taking T type and returning bool,
which is exactly what this lambda does.)
33

Method references

• In our example, we passed a reference to an instance
method (of an arbitrary object).

• We can also pass a reference to a static method, or to an
instance method of a particular object.

34

Reference to static method
public final class CardUtils {
public static boolean hasBlackSuit(Card pCard) {
return pCard.getSuit().getColor() != Color.BLACK;
}
}
// passing lambda expression
cards.removeIf(card -> CardUtils.hasBlackSuit(card));
// passing reference to static method
cards.removeIf(CardUtils::hasBlackSuit);

35

Reference to instance method (2)
• Suppose we want to remove all cards in our List<Card>

that have the same color (red/black) as the top card of a
Deck (which has a method topSameColorAs).

Deck deck = new Deck();
// passing lambda expression
cards.removeIf(card -> deck.topSameColorAs(card));
// passing instance method of the deck object
cards.removeIf(deck::topSameColorAs);

36

Method references
• All the methods used as references seen in our examples
(Card::hasBlackSuit, CardUtils::hasBlackSuit and
deck::topSameColorAs) take a single input and return a
boolean.

• Thus, they are compatible with the Predicate<T>
functional interface, which is taken by removeIf.

• The lambda expression or method reference must be
compatible with the parameter type of the method to
which we are passing them.
37

Lambdas in Python
• Lambdas in python are de ned using the lambda
keyword:

x = lambda a: a + 10
print(x(5)) # prints 15

• Unlike in Java, we can't de ne a block of statements as
the body. We can only use a single expression.

fi

fi

38

Lambdas in Python

• A lambda is of type Callable, and we can specify the
parameter and return types in its type annotation.

from typing import Callable
multiply: Callable[[int, int], int] = lambda x, y: x * y
result = multiply(5, 3)
print(result) # prints 15

39

Lambdas in Python

• One common use of a lambda expression in Python is to
use it to sort a list, using the key parameter for sort.

vals = ["AA", "AD", "AZ", "AG"]
# sort according to character at index 1
vals.sort(key = lambda s: s[1])

40

Lambdas in our project code

• There are several instances of lambdas in the project
code.

41

References

• Robillard ch. 9-9.2, 9.5, p.243-252, 261-264
• Exercises #1-4: https://github.com/prmr/DesignBook/blob/master/
exercises/e-chapter9.md

42

Coming up

• Class cancelled on April 3 & 8.
• Final lecture is on April 10.

43

